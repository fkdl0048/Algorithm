name: 이슈 닫힘 시 라벨별로 파일 생성

on:
  issues:
    types: [closed]

permissions:
  contents: write

jobs:
  create_files_by_label:
    runs-on: ubuntu-latest

    steps:
    - name: 레포지토리 체크아웃
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 전체 커밋 기록을 가져옵니다.

    - name: 이슈 정보 가져오기 및 코드 추출
      id: create_file
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const issue = context.payload.issue;
          const issueBody = issue.body || '';
          const title = issue.title || 'untitled';
          const labels = issue.labels.map(label => label.name);

          console.log('이슈 제목:', title);
          console.log('이슈 라벨:', labels);
          console.log('이슈 본문:', issueBody);

          if (labels.length === 0) {
            console.log('이슈에 라벨이 없습니다. 작업을 종료합니다.');
            process.exit(0);
          }

          // 코드 블록 추출 (언어 식별자와 코드 내용 모두 캡처)
          const codeBlockRegex = /```(\w*)\s*([\s\S]*?)\s*```/gm;
          let match;
          const codeBlocks = [];

          while ((match = codeBlockRegex.exec(issueBody)) !== null) {
            const language = match[1].toLowerCase(); // 언어 식별자 (소문자 변환)
            const code = match[2].trim();
            console.log(`추출된 코드 블록 (언어: ${language}):\n${code}`);
            codeBlocks.push({ language, code });
          }

          if (codeBlocks.length === 0) {
            console.log('이슈 본문에서 코드 블록을 찾을 수 없습니다.');
            core.setFailed('코드 블록을 추출하지 못했습니다.');
            process.exit(1);
          }

          // 언어 식별자에 따른 확장자 매핑 (필요에 따라 추가 가능)
          const extensionMap = {
            'cpp': 'cpp',
            'cs': 'cs',
            'py': 'py',
            'js': 'js',
            'java': 'java',
            'rb': 'rb',
            'go': 'go',
            'ts': 'ts',
            'html': 'html',
            'css': 'css',
            // 기타 언어 추가 가능
          };

          // 파일명과 폴더명에서 한글 포함하도록 수정
          const sanitizedTitle = title.replace(/ /g, '_').replace(/[^\p{L}\p{N}_.-]/gu, '');

          for (const label of labels) {
            const sanitizedLabel = label.replace(/ /g, '_').replace(/[^\p{L}\p{N}_.-]/gu, '');
            const folderPath = `${sanitizedLabel}`;

            // 각 코드 블록에 대해 파일 생성
            codeBlocks.forEach((block, index) => {
              let extension = 'txt'; // 기본 확장자
              if (block.language && extensionMap[block.language]) {
                extension = extensionMap[block.language];
              } else if (block.language) {
                extension = block.language; // 매핑에 없는 경우 언어 식별자를 확장자로 사용
              }

              // 여러 개의 코드 블록이 있을 경우 파일명을 구분하기 위해 인덱스 추가
              const fileName = codeBlocks.length > 1 ? `${sanitizedTitle}_${index + 1}.${extension}` : `${sanitizedTitle}.${extension}`;
              const filePath = `${folderPath}/${fileName}`;
              fs.mkdirSync(folderPath, { recursive: true });
              fs.writeFileSync(filePath, block.code);
              console.log(`파일 생성: ${filePath}`);
            });
          }

          core.setOutput('issue_number', issue.number);

    - name: 변경 사항 커밋 및 푸시
      uses: EndBug/add-and-commit@v9
      with:
        message: "이슈 #${{ steps.create_file.outputs.issue_number }}에서 솔루션 추가"
        add: "*/*.{cpp,cs,py,js,java,rb,go,ts,html,css,txt}"  # 필요한 확장자 추가
        author_name: GitHub Action
        author_email: action@github.com
        committer_name: GitHub Action
        committer_email: action@github.com
        pull_strategy: NO_REBASE  # 푸시 전에 git pull을 수행합니다.
        token: ${{ secrets.GITHUB_TOKEN }}
